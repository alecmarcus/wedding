// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // User ID (UUID-based)
  userName  String   @unique
  createdAt DateTime @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
}

model Credential {
  id           String   @id @default(uuid()) // Internal DB ID
  userId       String   @unique // Every credential is linked to a specific user
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  credentialId String   @unique // WebAuthn credential identifier
  publicKey    Bytes
  counter      Int      @default(0)

  @@index([credentialId])
  @@index([userId])
}

model Rsvp {
  id                  String   @id @default(uuid())
  name                String
  attending           Boolean
  email               String
  plusOne             Boolean  @default(false)
  plusOneName         String?
  dietaryRestrictions String?
  message             String?
  editToken           String   @unique @default(uuid())
  uploadToken         String   @unique @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  photos Photo[] // Relationship: One RSVP can have many photos

  @@index([email])
  @@index([editToken])
  @@index([uploadToken])
  @@index([attending])
}

model Photo {
  id            String   @id @default(uuid())
  fileName      String   @unique
  uploaderName  String?
  uploaderEmail String?
  rsvpId        String? // Link to RSVP
  rsvp          Rsvp?    @relation(fields: [rsvpId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@index([createdAt])
  @@index([fileName])
  @@index([rsvpId])
  @@index([uploaderName])
}
